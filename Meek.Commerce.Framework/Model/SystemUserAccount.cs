//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Meek.Commerce.Framework.Model
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(SystemUserRole))]
    public partial class SystemUserAccount: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public long ID
        {
            get { return _iD; }
            set
            {
                if (_iD != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _iD = value;
                    OnPropertyChanged("ID");
                }
            }
        }
        private long _iD;
    
        [DataMember]
        public string UserName
        {
            get { return _userName; }
            set
            {
                if (_userName != value)
                {
                    ChangeTracker.RecordOriginalValue("UserName", _userName);
                    _userName = value;
                    OnPropertyChanged("UserName");
                }
            }
        }
        private string _userName;
    
        [DataMember]
        public string Password
        {
            get { return _password; }
            set
            {
                if (_password != value)
                {
                    ChangeTracker.RecordOriginalValue("Password", _password);
                    _password = value;
                    OnPropertyChanged("Password");
                }
            }
        }
        private string _password;
    
        [DataMember]
        public string PasswordSalt
        {
            get { return _passwordSalt; }
            set
            {
                if (_passwordSalt != value)
                {
                    ChangeTracker.RecordOriginalValue("PasswordSalt", _passwordSalt);
                    _passwordSalt = value;
                    OnPropertyChanged("PasswordSalt");
                }
            }
        }
        private string _passwordSalt;
    
        [DataMember]
        public long UserRoleID
        {
            get { return _userRoleID; }
            set
            {
                if (_userRoleID != value)
                {
                    ChangeTracker.RecordOriginalValue("UserRoleID", _userRoleID);
                    if (!IsDeserializing)
                    {
                        if (SystemUserRole != null && SystemUserRole.ID != value)
                        {
                            SystemUserRole = null;
                        }
                    }
                    _userRoleID = value;
                    OnPropertyChanged("UserRoleID");
                }
            }
        }
        private long _userRoleID;
    
        [DataMember]
        public long ProfileID
        {
            get { return _profileID; }
            set
            {
                if (_profileID != value)
                {
                    ChangeTracker.RecordOriginalValue("ProfileID", _profileID);
                    _profileID = value;
                    OnPropertyChanged("ProfileID");
                }
            }
        }
        private long _profileID;
    
        [DataMember]
        public bool IsActive
        {
            get { return _isActive; }
            set
            {
                if (_isActive != value)
                {
                    ChangeTracker.RecordOriginalValue("IsActive", _isActive);
                    _isActive = value;
                    OnPropertyChanged("IsActive");
                }
            }
        }
        private bool _isActive;
    
        [DataMember]
        public Nullable<long> UserCreated
        {
            get { return _userCreated; }
            set
            {
                if (_userCreated != value)
                {
                    ChangeTracker.RecordOriginalValue("UserCreated", _userCreated);
                    _userCreated = value;
                    OnPropertyChanged("UserCreated");
                }
            }
        }
        private Nullable<long> _userCreated;
    
        [DataMember]
        public Nullable<System.DateTime> DateCreated
        {
            get { return _dateCreated; }
            set
            {
                if (_dateCreated != value)
                {
                    ChangeTracker.RecordOriginalValue("DateCreated", _dateCreated);
                    _dateCreated = value;
                    OnPropertyChanged("DateCreated");
                }
            }
        }
        private Nullable<System.DateTime> _dateCreated;
    
        [DataMember]
        public Nullable<long> UserModified
        {
            get { return _userModified; }
            set
            {
                if (_userModified != value)
                {
                    ChangeTracker.RecordOriginalValue("UserModified", _userModified);
                    _userModified = value;
                    OnPropertyChanged("UserModified");
                }
            }
        }
        private Nullable<long> _userModified;
    
        [DataMember]
        public Nullable<System.DateTime> DateModified
        {
            get { return _dateModified; }
            set
            {
                if (_dateModified != value)
                {
                    ChangeTracker.RecordOriginalValue("DateModified", _dateModified);
                    _dateModified = value;
                    OnPropertyChanged("DateModified");
                }
            }
        }
        private Nullable<System.DateTime> _dateModified;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public SystemUserRole SystemUserRole
        {
            get { return _systemUserRole; }
            set
            {
                if (!ReferenceEquals(_systemUserRole, value))
                {
                    var previousValue = _systemUserRole;
                    _systemUserRole = value;
                    FixupSystemUserRole(previousValue);
                    OnNavigationPropertyChanged("SystemUserRole");
                }
            }
        }
        private SystemUserRole _systemUserRole;
    
        [DataMember]
        public TrackableCollection<SystemUserRole> SystemUserRole1
        {
            get
            {
                if (_systemUserRole1 == null)
                {
                    _systemUserRole1 = new TrackableCollection<SystemUserRole>();
                    _systemUserRole1.CollectionChanged += FixupSystemUserRole1;
                }
                return _systemUserRole1;
            }
            set
            {
                if (!ReferenceEquals(_systemUserRole1, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_systemUserRole1 != null)
                    {
                        _systemUserRole1.CollectionChanged -= FixupSystemUserRole1;
                    }
                    _systemUserRole1 = value;
                    if (_systemUserRole1 != null)
                    {
                        _systemUserRole1.CollectionChanged += FixupSystemUserRole1;
                    }
                    OnNavigationPropertyChanged("SystemUserRole1");
                }
            }
        }
        private TrackableCollection<SystemUserRole> _systemUserRole1;
    
        [DataMember]
        public TrackableCollection<SystemUserRole> SystemUserRole2
        {
            get
            {
                if (_systemUserRole2 == null)
                {
                    _systemUserRole2 = new TrackableCollection<SystemUserRole>();
                    _systemUserRole2.CollectionChanged += FixupSystemUserRole2;
                }
                return _systemUserRole2;
            }
            set
            {
                if (!ReferenceEquals(_systemUserRole2, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_systemUserRole2 != null)
                    {
                        _systemUserRole2.CollectionChanged -= FixupSystemUserRole2;
                    }
                    _systemUserRole2 = value;
                    if (_systemUserRole2 != null)
                    {
                        _systemUserRole2.CollectionChanged += FixupSystemUserRole2;
                    }
                    OnNavigationPropertyChanged("SystemUserRole2");
                }
            }
        }
        private TrackableCollection<SystemUserRole> _systemUserRole2;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            SystemUserRole = null;
            SystemUserRole1.Clear();
            SystemUserRole2.Clear();
        }

        #endregion
        #region Association Fixup
    
        private void FixupSystemUserRole(SystemUserRole previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.SystemUserAccount.Contains(this))
            {
                previousValue.SystemUserAccount.Remove(this);
            }
    
            if (SystemUserRole != null)
            {
                if (!SystemUserRole.SystemUserAccount.Contains(this))
                {
                    SystemUserRole.SystemUserAccount.Add(this);
                }
    
                UserRoleID = SystemUserRole.ID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("SystemUserRole")
                    && (ChangeTracker.OriginalValues["SystemUserRole"] == SystemUserRole))
                {
                    ChangeTracker.OriginalValues.Remove("SystemUserRole");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("SystemUserRole", previousValue);
                }
                if (SystemUserRole != null && !SystemUserRole.ChangeTracker.ChangeTrackingEnabled)
                {
                    SystemUserRole.StartTracking();
                }
            }
        }
    
        private void FixupSystemUserRole1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (SystemUserRole item in e.NewItems)
                {
                    item.SystemUserAccount1 = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("SystemUserRole1", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SystemUserRole item in e.OldItems)
                {
                    if (ReferenceEquals(item.SystemUserAccount1, this))
                    {
                        item.SystemUserAccount1 = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("SystemUserRole1", item);
                    }
                }
            }
        }
    
        private void FixupSystemUserRole2(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (SystemUserRole item in e.NewItems)
                {
                    item.SystemUserAccount2 = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("SystemUserRole2", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SystemUserRole item in e.OldItems)
                {
                    if (ReferenceEquals(item.SystemUserAccount2, this))
                    {
                        item.SystemUserAccount2 = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("SystemUserRole2", item);
                    }
                }
            }
        }

        #endregion
    }
}
