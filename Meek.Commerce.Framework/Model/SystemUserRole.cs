//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Meek.Commerce.Framework.Model
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(SystemUserAccount))]
    public partial class SystemUserRole: IAuditable, IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public long ID
        {
            get { return _iD; }
            set
            {
                if (_iD != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _iD = value;
                    OnPropertyChanged("ID");
                }
            }
        }
        private long _iD;
    
        [DataMember]
        public string RoleCode
        {
            get { return _roleCode; }
            set
            {
                if (_roleCode != value)
                {
                    ChangeTracker.RecordOriginalValue("RoleCode", _roleCode);
                    _roleCode = value;
                    OnPropertyChanged("RoleCode");
                }
            }
        }
        private string _roleCode;
    
        [DataMember]
        public string Description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    ChangeTracker.RecordOriginalValue("Description", _description);
                    _description = value;
                    OnPropertyChanged("Description");
                }
            }
        }
        private string _description;
    
        [DataMember]
        public bool IsTemplate
        {
            get { return _isTemplate; }
            set
            {
                if (_isTemplate != value)
                {
                    ChangeTracker.RecordOriginalValue("IsTemplate", _isTemplate);
                    _isTemplate = value;
                    OnPropertyChanged("IsTemplate");
                }
            }
        }
        private bool _isTemplate;
    
        [DataMember]
        public bool IsActive
        {
            get { return _isActive; }
            set
            {
                if (_isActive != value)
                {
                    ChangeTracker.RecordOriginalValue("IsActive", _isActive);
                    _isActive = value;
                    OnPropertyChanged("IsActive");
                }
            }
        }
        private bool _isActive;
    
        [DataMember]
        public Nullable<long> UserCreated
        {
            get { return _userCreated; }
            set
            {
                if (_userCreated != value)
                {
                    ChangeTracker.RecordOriginalValue("UserCreated", _userCreated);
                    if (!IsDeserializing)
                    {
                        if (SystemUserAccount1 != null && SystemUserAccount1.ID != value)
                        {
                            SystemUserAccount1 = null;
                        }
                    }
                    _userCreated = value;
                    OnPropertyChanged("UserCreated");
                }
            }
        }
        private Nullable<long> _userCreated;
    
        [DataMember]
        public Nullable<System.DateTime> DateCreated
        {
            get { return _dateCreated; }
            set
            {
                if (_dateCreated != value)
                {
                    ChangeTracker.RecordOriginalValue("DateCreated", _dateCreated);
                    _dateCreated = value;
                    OnPropertyChanged("DateCreated");
                }
            }
        }
        private Nullable<System.DateTime> _dateCreated;
    
        [DataMember]
        public Nullable<long> UserModified
        {
            get { return _userModified; }
            set
            {
                if (_userModified != value)
                {
                    ChangeTracker.RecordOriginalValue("UserModified", _userModified);
                    if (!IsDeserializing)
                    {
                        if (SystemUserAccount2 != null && SystemUserAccount2.ID != value)
                        {
                            SystemUserAccount2 = null;
                        }
                    }
                    _userModified = value;
                    OnPropertyChanged("UserModified");
                }
            }
        }
        private Nullable<long> _userModified;
    
        [DataMember]
        public Nullable<System.DateTime> DateModified
        {
            get { return _dateModified; }
            set
            {
                if (_dateModified != value)
                {
                    ChangeTracker.RecordOriginalValue("DateModified", _dateModified);
                    _dateModified = value;
                    OnPropertyChanged("DateModified");
                }
            }
        }
        private Nullable<System.DateTime> _dateModified;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<SystemUserAccount> SystemUserAccount
        {
            get
            {
                if (_systemUserAccount == null)
                {
                    _systemUserAccount = new TrackableCollection<SystemUserAccount>();
                    _systemUserAccount.CollectionChanged += FixupSystemUserAccount;
                }
                return _systemUserAccount;
            }
            set
            {
                if (!ReferenceEquals(_systemUserAccount, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_systemUserAccount != null)
                    {
                        _systemUserAccount.CollectionChanged -= FixupSystemUserAccount;
                    }
                    _systemUserAccount = value;
                    if (_systemUserAccount != null)
                    {
                        _systemUserAccount.CollectionChanged += FixupSystemUserAccount;
                    }
                    OnNavigationPropertyChanged("SystemUserAccount");
                }
            }
        }
        private TrackableCollection<SystemUserAccount> _systemUserAccount;
    
        [DataMember]
        public SystemUserAccount SystemUserAccount1
        {
            get { return _systemUserAccount1; }
            set
            {
                if (!ReferenceEquals(_systemUserAccount1, value))
                {
                    var previousValue = _systemUserAccount1;
                    _systemUserAccount1 = value;
                    FixupSystemUserAccount1(previousValue);
                    OnNavigationPropertyChanged("SystemUserAccount1");
                }
            }
        }
        private SystemUserAccount _systemUserAccount1;
    
        [DataMember]
        public SystemUserAccount SystemUserAccount2
        {
            get { return _systemUserAccount2; }
            set
            {
                if (!ReferenceEquals(_systemUserAccount2, value))
                {
                    var previousValue = _systemUserAccount2;
                    _systemUserAccount2 = value;
                    FixupSystemUserAccount2(previousValue);
                    OnNavigationPropertyChanged("SystemUserAccount2");
                }
            }
        }
        private SystemUserAccount _systemUserAccount2;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            SystemUserAccount.Clear();
            SystemUserAccount1 = null;
            SystemUserAccount2 = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupSystemUserAccount1(SystemUserAccount previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.SystemUserRole1.Contains(this))
            {
                previousValue.SystemUserRole1.Remove(this);
            }
    
            if (SystemUserAccount1 != null)
            {
                if (!SystemUserAccount1.SystemUserRole1.Contains(this))
                {
                    SystemUserAccount1.SystemUserRole1.Add(this);
                }
    
                UserCreated = SystemUserAccount1.ID;
            }
            else if (!skipKeys)
            {
                UserCreated = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("SystemUserAccount1")
                    && (ChangeTracker.OriginalValues["SystemUserAccount1"] == SystemUserAccount1))
                {
                    ChangeTracker.OriginalValues.Remove("SystemUserAccount1");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("SystemUserAccount1", previousValue);
                }
                if (SystemUserAccount1 != null && !SystemUserAccount1.ChangeTracker.ChangeTrackingEnabled)
                {
                    SystemUserAccount1.StartTracking();
                }
            }
        }
    
        private void FixupSystemUserAccount2(SystemUserAccount previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.SystemUserRole2.Contains(this))
            {
                previousValue.SystemUserRole2.Remove(this);
            }
    
            if (SystemUserAccount2 != null)
            {
                if (!SystemUserAccount2.SystemUserRole2.Contains(this))
                {
                    SystemUserAccount2.SystemUserRole2.Add(this);
                }
    
                UserModified = SystemUserAccount2.ID;
            }
            else if (!skipKeys)
            {
                UserModified = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("SystemUserAccount2")
                    && (ChangeTracker.OriginalValues["SystemUserAccount2"] == SystemUserAccount2))
                {
                    ChangeTracker.OriginalValues.Remove("SystemUserAccount2");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("SystemUserAccount2", previousValue);
                }
                if (SystemUserAccount2 != null && !SystemUserAccount2.ChangeTracker.ChangeTrackingEnabled)
                {
                    SystemUserAccount2.StartTracking();
                }
            }
        }
    
        private void FixupSystemUserAccount(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (SystemUserAccount item in e.NewItems)
                {
                    item.SystemUserRole = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("SystemUserAccount", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SystemUserAccount item in e.OldItems)
                {
                    if (ReferenceEquals(item.SystemUserRole, this))
                    {
                        item.SystemUserRole = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("SystemUserAccount", item);
                    }
                }
            }
        }

        #endregion
    }
}
